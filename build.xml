<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="uv" basedir="." default="buildLib">
	
	<property name="version" value="1.0beta" />

	<property name="srcDir" value="src" />
	<property name="resourcesDir" value="resources" />
	<property name="testDir" value="test" />
	<property name="compileDir" value="antBuild" />
	<property name="junitBuildDir" value="junitBuild" />
	<property name="classesDir" value="${compileDir}"/>
	<property name="javadocDir" value="javadoc" />
	
	<property name="uvPath" value="ari/ucd/**" />
	<property name="includesList" value="${uvPath},${utilsPath}" />

	<property name="jarDest" value="." />
	<property name="libJarFile" value="${jarDest}/uv_${version}.jar" />
	<property name="runnableJarFile" value="${jarDest}/uvrun_${version}.jar" />
	<property name="srcJarFile" value="${jarDest}/uv_src_${version}.jar" />
	<property name="javadocJarFile" value="${jarDest}/uv_javadoc_${version}.jar" />
	
	<property name="testsDir" value="test" />
	<property name="junitReportsDir" value="reports" />
	
	<fail message="The property JUNIT-API must be set! It provides the path toward a directory or a JAR which contains all classes needed to use JUnit.">
		<condition><not><isset property="JUNIT-API"/></not></condition>
	</fail>
	
	<!-- CLASSPATHS -->
	<path id="junit.class.path">
		<pathelement path="${JUNIT-API}" />
	</path>
	
	<!-- START -->
	<echo>UV LIBRARY VERSION = ${version}</echo>
	
	<!-- BUILD ALL TASK -->
	<target name="buildAll" depends="buildLibAndSrc,buildJavadoc"
			description="Build four JARs: the library (classes), the runnable JAR, its sources and its Javadoc. Then, except the JAR, all the compiled javadoc files are deleted." >
		<antcall target="cleanJavadocBuild" />
	</target>
	
	<target name="cleanAll" depends="clean,cleanJUnitReports,cleanJavadoc" description="Delete all files generated by this ANT file for the set version." />
	
	<!-- JUNIT VALIDATION -->
	<target name="cleanJUnitReports" description="Clean the JUnit reports directory.">
			<delete dir="${junitReportsDir}" failonerror="false" />
	</target>
	
	<target name="junitValidation" depends="cleanJUnitReports,compileJUnit" description="Executes all JUnit tests before building the library and stop ANT at any error.">
		<mkdir dir="${junitReportsDir}"/>
		<junit errorproperty="testsFailure" failureproperty="testsFailure">
			<classpath refid="junit.class.path" />
			<classpath>
				<pathelement location="${compileDir}" />
				<pathelement location="${junitBuildDir}" />
				<pathelement location="${resourcesDir}" />
			</classpath>
			<formatter type="brief" usefile="yes" />
			<batchtest todir="${junitReportsDir}">
				<fileset dir="${testsDir}" includes="ari/ucd/**/Test*.java" />
			</batchtest>
		</junit>
		<delete dir="${junitBuildDir}" failonerror="false" />
		<fail if="${testsFailure}" message="Failed JUnit validation!" />
	</target>
	
	<target name="compileJUnit" depends="compileLib" description="Build all the classes to test.">
		<mkdir dir="${junitBuildDir}" />
		<javac destdir="${junitBuildDir}" includes="${includesList}" includeantruntime="false" encoding="utf8" bootclasspath="${uv.bootclasspath}" debug="true">
			<src path="${testDir}" />
			<classpath refid="junit.class.path" />
			<classpath>
				<pathelement location="${compileDir}" />
			</classpath>
		</javac>
	</target>
			
	<!-- LIB & SOURCES -->
	<target name="clean" description="Delete the JARs for the library (classes), the runnable JAR and for its sources for the set version.">
		<delete file="${libJarFile}" failonerror="false" />
		<delete file="${srcJarFile}" failonerror="false" />
		<delete file="${runnableJarFile}" failonerror="false" />
		<delete dir="${compileDir}" failonerror="false" />
		<delete dir="${junitBuildDir}" failonerror="false" />
	</target>
	
	<target name="compileLib" depends="clean" description="Build all the classes. This target is particularly usefull because it lets highlighting missing dependencies.">
		<mkdir dir="${compileDir}" />
		<javac destdir="${compileDir}" srcdir="${srcDir}" includes="${includesList}" includeantruntime="false" encoding="utf8" bootclasspath="${uv.bootclasspath}" debug="true" />
	</target>
	
	<target name="buildLib" depends="compileLib,junitValidation" description="After 'clean', build the library JAR (only classes) and the runnable JAR.">
		<echo>Generate the library:</echo>
		<jar basedir="${classesDir}" destfile="${libJarFile}" includes="${includesList}">
			<zipfileset dir="${resourcesDir}" />
		</jar>
		<echo>Generate the runnable JAR:</echo>
		<jar basedir="${classesDir}" destfile="${runnableJarFile}" filesetmanifest="mergewithoutmain" includes="${includesList}">
            <manifest>
                <attribute name="Main-Class" value="ari.ucd.UCDParser"/>
                <attribute name="Class-Path" value="."/>
            </manifest>
			<zipfileset dir="${resourcesDir}" />
        </jar>
		<echo>Delete compiled classes:</echo>
		<delete dir="${compileDir}" failonerror="true" />
	</target>
	
	<target name="buildLibAndSrc" depends="buildLib" description="After 'clean' and 'buildLib', build the sources JAR (only .java).">
		<jar compress="false" destfile="${srcJarFile}">
			<zipfileset dir="${srcDir}" includes="${includesList}" prefix="${srcDir}" />
			<zipfileset dir="${resourcesDir}" prefix="${resourcesDir}" />
		</jar>
	</target>
	
	<!-- JAVADOC -->
	<target name="cleanJavadocBuild" description="Delete the whole generated/compiled Javadoc directory.">
		<delete dir="${javadocDir}" failonerror="false" />
	</target>
		
	<target name="cleanJavadoc" depends="cleanJavadocBuild" description="Delete the Javadoc JAR AND the whole generated/compiled Javadoc directory.">
		<delete file="${jarDest}/${javadocJarFile}" failonerror="false" />
	</target>
	
	<target name="compileJavadoc" depends="cleanJavadoc" description="After 'cleanJavadoc', compile the whole Javadoc.">
		<javadoc encoding="utf-8" charset="utf-8" docencoding="utf-8" access="protected" author="true" classpath="." destdir="${javadocDir}" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" source="1.7" splitindex="true" use="true" version="true">
			<packageset dir="${srcDir}" includes="${includesList}" />
		</javadoc>
	</target>
	
	<target name="buildJavadoc" depends="compileJavadoc" description="After 'compileJavadoc', build the Javadoc JAR.">
		<jar destfile="${javadocJarFile}" basedir="${javadocDir}" />
	</target>
	
</project>